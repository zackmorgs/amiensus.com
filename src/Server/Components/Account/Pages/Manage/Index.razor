@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Server.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Amiensus | Profile</PageTitle>

<section>
    <header class="hero">
        <h2 class="text-3xl">Profile</h2>
    </header>
</section>
<StatusMessage />

<section>
    <div class="container mx-auto">
        <div class="max-w-4xl mx-auto">
            <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-red-500" role="alert" />
                <div class="flex flex-col">
                    <label for="username" class="form-label">Username</label>
                    <input type="text" value="@username" class="p-2 rounded" placeholder="Please choose your username."
                        disabled />
                </div>
                <div class="flex flex-col">
                    <InputText @bind-Value="Input.PhoneNumber" class="p-2 rounded" 
                        placeholder="Please enter your phone number." />
                    <label for="phone-number" class="form-label">Phone number</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-red-500" />
                </div>
                <button type="submit" class="btn">Save</button>
            </EditForm>
        </div>
    </div>
</section>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
