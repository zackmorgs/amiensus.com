@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Server.Data
@using Server.Models;

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<h3 class="text-2xl mb-4">Change password</h3>
<StatusMessage Message="@message" />

<div class="max-w-sm mx-auto">
    <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-floating mb-4">
            <label for="old-password" class="block">Old password</label>

            <InputText type="password" @bind-Value="Input.OldPassword" class="p-2 rounded w-full"
                autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
            <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
        </div>
        <div class="form-floating mb-4">
            <label for="new-password" class="block">New password</label>

            <InputText type="password" @bind-Value="Input.NewPassword" class="p-2 rounded w-full" autocomplete="new-password"
                aria-required="true" placeholder="Please enter your new password." />
            <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
        </div>
        <div class="form-floating mb-4">
            <label for="confirm-password" class="block">Confirm password</label>
            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="p-2 rounded w-full"
                autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>
        <button type="submit" class="w-100 btn">Update password</button>
    </EditForm>
</div>


@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
